// <auto-generated />
using System;
using Certificates2024.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Certificates2024.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Certificates2024.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Certificates2024.Models.CandidateCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateScore")
                        .HasColumnType("int");

                    b.Property<int>("CertificateTopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaximumScore")
                        .HasColumnType("int");

                    b.Property<bool>("ResultLabel")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CertificateTopicId");

                    b.ToTable("CandidateCertificates");
                });

            modelBuilder.Entity("Certificates2024.Models.CertificateTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertificateTopics");
                });

            modelBuilder.Entity("Certificates2024.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BooleanA")
                        .HasColumnType("bit");

                    b.Property<bool>("BooleanB")
                        .HasColumnType("bit");

                    b.Property<bool>("BooleanC")
                        .HasColumnType("bit");

                    b.Property<bool>("BooleanD")
                        .HasColumnType("bit");

                    b.Property<int>("CertificateTopicId")
                        .HasColumnType("int");

                    b.Property<string>("ImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTopicId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Certificates2024.Models.CandidateCertificate", b =>
                {
                    b.HasOne("Certificates2024.Models.Candidate", "Candidate")
                        .WithMany("CandidateCertificates")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Certificates2024.Models.CertificateTopic", "CertificateTopic")
                        .WithMany("CandidateCertificates")
                        .HasForeignKey("CertificateTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("CertificateTopic");
                });

            modelBuilder.Entity("Certificates2024.Models.Question", b =>
                {
                    b.HasOne("Certificates2024.Models.CertificateTopic", "CertificateTopic")
                        .WithMany("Questions")
                        .HasForeignKey("CertificateTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificateTopic");
                });

            modelBuilder.Entity("Certificates2024.Models.Candidate", b =>
                {
                    b.Navigation("CandidateCertificates");
                });

            modelBuilder.Entity("Certificates2024.Models.CertificateTopic", b =>
                {
                    b.Navigation("CandidateCertificates");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
